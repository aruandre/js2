<%- include header %>
<script src="/socket.io/socket.io.js"></script>

<body class="container">
	<div class="row">
		<div class="col-md-6 offset-md-3 col-sm-12">
			<h1 class="text-center">Support Chat
			</h1>
			<style>
				#messages {height: 300px;}
			</style>
			<div id="chat">
				<input type="text" id="username" class="form-control" placeholder="Enter name...">
				<br>
				<div class="card">
					<div id="messages" class="card-block">
						<div id="typing"></div>
						<div id="disconnect"></div>
					</div>
				</div>
				<br>
				<div id="status"></div>
				<textarea id="textarea" class="form-control" placeholder="Enter message..."></textarea>
				<button id="send" class="btn btn-success">Send</button>
				<button id="clear" class="btn btn-danger">Clear</button>
			</div>
		</div>	
	</div>
<script type="text/javascript">
	(function(){
		let element = function(id){
			return document.getElementById(id);
		}

		//get elements
		let status = element('status');
		let messages = element('messages');
		let textarea = element('textarea');
		let username = element('username');
		let clearBtn = element('clear');
		//let typing = element('typing');

		//set default status
		let statusDefault = status.textContent;

		let setStatus = function(s) {
			//set status
			status.textContent = s;

			if(s !== statusDefault){
				let delay = setTimeout(() => {
					setStatus(statusDefault);
				}, 4000);
			}
		}

		//connect to socket.io
		let socket = io.connect('http://127.0.0.1:3000');

		//check for connection
		if(socket !== undefined){
			console.log('socket.io Ã¼hendus olemas');

			socket.on('output', (data) => {
				//console.log(data);
				if(data.length){
					for(let i = 0; i < data.length; i++){
						//build out message div and its attribute
						let message = document.createElement('div');
						message.setAttribute('class', 'chat-message');
						message.textContent = data[i].name + ": " + data[i].message;
						messages.appendChild(message);
						messages.insertBefore(message, messages.firstChild);
					}
				}
			});

			//get status from server
			socket.on('status', (data) => {
				//get message status
				setStatus((typeof data === 'object') ? data.message: data);
			
				//if status is clear, clear text
				if(data.clear){
					textarea.value = '';
				}
			});

			//handle input
			textarea.addEventListener('keydown', (e) => {
				if(e.which === 13 && e.shiftKey == false){ 	//keycode 13 = enter
					//emit to server input
					socket.emit('input', {
						name:username.value,
						message:textarea.value
					});

					//cancels the event
					e.preventDefault();
				}
			});

			//handle chat clear
			clearBtn.addEventListener('click', () => {
				socket.emit('clear');
			});

			//clear message
			socket.on('cleared', () => {
				messages.textContent = '';
			});

			//typing message
			typing.addEventListener('keypress', (e) => {
				if(data){
					document.getElementById('typing').innerHTML = '<p>' + data + ' is typing...</p>';
				} else {
					document.getElementById('typing').innerHTML = '';

				}
				socket.emit('typing');
			});

			connected_users = [];
			//user connected message
			socket.on('user_connected', () => {
				connected_users.push(username);
			})

			//disconnected message
			socket.emit('username', username);
			socket.on('disconnect', () => {
				let connectionMsg = socket.name + 'disconnected';
				console.log(connectionMsg);
			});

			/*socket.on('disconnect', () => {
					document.getElementById('disconnect').innerHTML = username + ' disconnected';
					
			});*/
		}

	})();
</script>
</body>
<hr>

<%- include footer %>